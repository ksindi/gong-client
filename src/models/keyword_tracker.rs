/*
 * Gong API
 *
 * <h2>Overview</h2> <p> The Gong API allows you to: </p> <ol> <li> Receive the following information from Gong: <ol type=\"a\"> <li> Your company's <a href=\"#tag--Calls\">calls</a> in Gong </li> <li> Your company's <a href=\"#tag--Users\">users</a> in Gong </li> <li> Your company's user <a href=\"#tag--Stats\">stats</a> in Gong </li> <li> Your company's user <a href=\"#tag--Settings\">settings</a> in Gong </li> <li> Your company's <a href=\"#tag--Library\">libraries</a> in Gong </li> </ol></li> <li> <a href=\"#post-/v2/calls\">Upload</a> new or  <a href=\"#put-/v2/calls/-id-/media\">update</a>  call recordings in Gong, in order to support cases where you have an internal system that records  calls or obtains them from a third-party entity. </li> <li> <a href=\"#post-/v2/data-privacy/erase-data-for-email-address\">Data Privacy</a>:  Delete users and all their associated elements.</li> <li> Upload <a href=\"#tag--CRM\">CRM</a> data into Gong.  </li> </ol> <p>Check <a href=\"https://app.gong.io/company/api-authentication?currentTab=MY_API_TAB\">here</a> what's your base URL for all API calls. </p> <h2>Authentication</h2>  <p> There are two ways to retrieve credentials to the Gong Public API: </p> <ol><li>Retrieve Manually:<br> <p> In the <a href=\"https://app.gong.io/company/api\">Gong API Page</a> (you must be a technical administrator in Gong), click \"Create\" to receive an <b>Access Key</b>  and an <b>Access Key Secret</b>.<br> </p> <p> Use the Basic Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc7617.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Basic &lt;token&gt;</code><br> </p> <p> To create the basic token, combine the <b>Access Key</b> and the <b>Access Key Secret</b> with  colon (:) and then encode in Base64 as following:<br> <code>Base64(&lt;accessKey&gt; : &lt;accessKeySecret&gt;)</code><br><br> </p></li> <li>Retrieve through OAuth<br> <p> To obtain the Bearer token, follow the steps described in the <a target=\"_blank\" href=\"https://help.gong.io/hc/en-us/articles/13944551222157-Create-an-app-for-Gong\">Gong OAuth Guide</a>. <br></p> <p> After obtaining the token, use the Bearer Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc6750.txt\">RFC</a>) to access the Public API as shown below:<br> <code>Authorization: Bearer &lt;token&gt;</code> </p> </li></ol> <h2>Limits</h2>  <p> By default Gong limits your company's access to the service to 3 API calls per second, and 10,000 API calls per day. </p> <p> When the rate of API calls exceeds these limits an HTTP status code <b>429</b> is returned and a <b>Retry-After</b> header indicates  how many seconds to wait before making a new request. </p><p> If required, contact help@gong.io to change these limits. </p>  <h2>Cursors</h2>  <p> Some API calls that return a list are limited in the amount of records they may return, so multiple API calls may be  required to bring all records. Such an API call also returns a <b>records</b> field, which contains the number of records  in the current page, the current page number and the total number of records. </p> <p> In cases where the total number of records exceeds the number of records thus far retrieved, the <b>records</b> field will also  contain a <b>cursor</b> field which can be used to access the next page of records. To retrieve the next page, repeat the API call with  the <b>cursor</b> value as supplied by the previous API call. All other request inputs should remain the same. </p> <h2>Forward Compatibility</h2>  <p> When coding a system to accept Gong data, take into account that Gong may, without prior warning, add fields to the JSON output.  It is recommended to future proof your code so that it disregards all JSON fields you don't actually use.  </p><p></p>
 *
 * The version of the OpenAPI document: V2
 * 
 * Generated by: https://openapi-generator.tech
 */

/// KeywordTracker : The definition of a tracker.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KeywordTracker {
    /// The unique identifier of the tracker.
    #[serde(rename = "trackerId", skip_serializing_if = "Option::is_none")]
    pub tracker_id: Option<String>,
    /// The name of the tracker.
    #[serde(rename = "trackerName", skip_serializing_if = "Option::is_none")]
    pub tracker_name: Option<String>,
    /// The id of the workspace the tracker is in.
    #[serde(rename = "workspaceId", skip_serializing_if = "Option::is_none")]
    pub workspace_id: Option<String>,
    /// The words and phrases defined for the tracker. Each languagueKeywords object contains the words and phrases defined in the specified language.
    #[serde(rename = "languageKeywords", skip_serializing_if = "Option::is_none")]
    pub language_keywords: Option<Vec<crate::models::TrackerLanguageKeyword>>,
    /// Sets whether to track the keywords when said by people affiliated to a specific company. Options are: \"Anyone\", \"Company\", \"NonCompany\".
    #[serde(rename = "affiliation", skip_serializing_if = "Option::is_none")]
    pub affiliation: Option<String>,
    /// When true, only looks for the keywords when they are part of a question.
    #[serde(rename = "partOfQuestion", skip_serializing_if = "Option::is_none")]
    pub part_of_question: Option<bool>,
    /// Sets whether the words and phrases are tracked at the beginning, end or anytime in a call. Options are: \"Anytime\", \"First\", or \"Last\". For “First” and “Last” see the saidAtInterval and saidAtUnit fields to see how long to track the keywords for.
    #[serde(rename = "saidAt", skip_serializing_if = "Option::is_none")]
    pub said_at: Option<String>,
    /// Sets the period of time to check if the words or phrases came up in the call (according to the saidAt setting). This can be either minutes or percent depending on the value in the saidAtUnit parameter.
    #[serde(rename = "saidAtInterval", skip_serializing_if = "Option::is_none")]
    pub said_at_interval: Option<i32>,
    /// Sets whether the time to look for keywords is in minutes or a percentage of the call duration (according to the saidAt setting).
    #[serde(rename = "saidAtUnit", skip_serializing_if = "Option::is_none")]
    pub said_at_unit: Option<String>,
    /// Sets the topics in the call the tracker terms should be picked up in.
    #[serde(rename = "saidInTopics", skip_serializing_if = "Option::is_none")]
    pub said_in_topics: Option<Vec<String>>,
    /// Sets the parts of the call to look for the keyword trackers in.
    #[serde(rename = "saidInCallParts", skip_serializing_if = "Option::is_none")]
    pub said_in_call_parts: Option<Vec<String>>,
    /// A filter that defines which calls to include when searching for the keyword tracker. The filter is in JSON and is in the URL of the search page. Example: a filter for all outbound calls { \"type\": \"And\", \"filters\": [ { \"type\": \"CallDirection\", \"terms\": [\"OUTBOUND\"] } ] }
    #[serde(rename = "filterQuery", skip_serializing_if = "Option::is_none")]
    pub filter_query: Option<String>,
    /// Sets the date and time the tracker was created, in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// The Id of the team member who created the tracker. Null when the tracker is built-in.
    #[serde(rename = "creatorUserId", skip_serializing_if = "Option::is_none")]
    pub creator_user_id: Option<String>,
    /// The date and time the tracker settings were last updated, in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    /// The Id of the team member who updated the tracker. Null when the tracker is built-in.
    #[serde(rename = "updaterUserId", skip_serializing_if = "Option::is_none")]
    pub updater_user_id: Option<String>,
}

impl KeywordTracker {
    /// The definition of a tracker.
    pub fn new() -> KeywordTracker {
        KeywordTracker {
            tracker_id: None,
            tracker_name: None,
            workspace_id: None,
            language_keywords: None,
            affiliation: None,
            part_of_question: None,
            said_at: None,
            said_at_interval: None,
            said_at_unit: None,
            said_in_topics: None,
            said_in_call_parts: None,
            filter_query: None,
            created: None,
            creator_user_id: None,
            updated: None,
            updater_user_id: None,
        }
    }
}


